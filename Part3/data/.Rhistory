for(k in 1:(i-1))
line<-str_c(line, ' ')
}
for (k in i:5){
line <-str_c(line, '#')
}
print(line)
}
space<-0
for(i in 1:5){
line<-''
if(i!==1){
for(k in 1:(i-1))
line<-str_c(line, ' ')
}
for (k in i:5){
line <-str_c(line, '#')
}
print(line)
}
for(i in 1:5){
line<-''
if(i!=1){
for(k in 1:(i-1))
line<-str_c(line, '')
}
for (k in i:5){
line <-str_c(line, '#')
}
print(line)
}
for(i in 1:5){
line<-''
if(i!=1){
for(k in 1:(i-1))
line<-str_c(line, '')
}
for (k in i:5){
line <-str_c(line, '*')
}
print(line)
}
for(i in 1:10){
line<-''
if(i!=1){
for(k in 1:(i-1))
line<-str_c(line, '')
}
for (k in i:10){
line <-str_c(line, '*')
}
print(line)
}
for(i in 1:10){
line<-''
if(i!=1){
for(k in 1:(i-1))
line<-str_c(line, '')
}
for (k in i:10){
line <-str_c(line, '#')
}
print(line)
}
multiple(1000, 4)
library(stringr)
for(i in 1:5){
line<-''{}
for(k in 1:i){
line<-str_c(line, '#')
}
print(line)
}
for(i in 1:5){
line<-''{}
for(k in 1:i){
line<-str_c(line, '#')
}
print(line)
}
for(i in 1:5){
line<-''{}
for(k in 1:i){
line<-str_c(line, '#')
}
print(line)
}
for(i in 1:5){
line<-''
for(k in 1:i){
line<-str_c(line, '#')
}
print(line)
}
for(i in 1:9){
for(k in 1:9) {
print(i 'x' k = i*k)
}
}
for(i in 1:9){
for(k in 1:9) {
print(i 'x' k = i*k)
}
}
for(i in 1:9){
for(k in 1:9) {
print(i "x" k = i*k)
}
}
for(i in 1:9){
for(k in 1:9) {
print(cat(i "x" k "=" i*k))
}
}
for(i in 1:9){
for(k in 1:9) {
print(i "x" k "=" i*k)
}
}
for(i in 1:9){
for(k in 1:9) {
print(i "x" k "=" i*k)
}
}
for(i in 1:9){
for(k in 1:9) {
print(paste(i, "x", k, "=", i*k))
}
}
for(i in 1:10){
line<-''
if(i!=1){
for(k in 1:(i-1))
line<-str_c(line, '')
}
for (k in i:10){
line <-str_c(line, '#')
}
print(line)
}
for(i in 1:9){
for(k in 1:9) {
print(paste(i, "x", k, "=", i*k))
}
}
for(i in 1:10){
line<-''
if(i!=1){
for(k in 1:(i-1))
line<-str_c(line, '')
}
for (k in i:10){
line <-str_c(line, '#')
}
print(line)
}
pyramid<-function(rows){
for (i in rows){
print(" "*(rows-i-1)+"#"*(i+1))}
for(j in (rows-1|0|-1)){
print(" "*(rows-j)+"#"*(j))}}
rows<-5
pyramid(rows)
diamond <- function(max) {
# Upper triangle
space <- max - 1
for (i in 0:(max - 1)) {
for (j in 0:space) cat(" ")
for (j in 0:i) cat("* ")
cat("\n")
space <- space - 1
}
# Lower triangle
space = 1;
for (i in (max - 1):1) {
for (j in 0:space) cat(" ")
for (j in 0:(i - 1)) cat("* ")
cat("\n")
space <- space + 1
}
}
#구구단
for(i in 1:9){
for(k in 1:9) {
print(paste(i, "x", k, "=", i*k))
}
}
#다이아몬드
diamond <- function(max) {
# Upper triangle
space <- max - 1
for (i in 0:(max - 1)) {
for (j in 0:space) cat(" ")
for (j in 0:i) cat("* ")
cat("\n")
space <- space - 1
}
# Lower triangle
space = 1;
for (i in (max - 1):1) {
for (j in 0:space) cat(" ")
for (j in 0:(i - 1)) cat("* ")
cat("\n")
space <- space + 1
}
}
diamond(10)
diamond(10)
#다이아몬드
diamond <- function(max) {
# Upper triangle
space <- max - 1
for (i in 0:(max - 1)) {
for (j in 0:space) cat(" ")
for (j in 0:i) cat("# ")
cat("\n")
space <- space - 1
}
# Lower triangle
space = 1;
for (i in (max - 1):1) {
for (j in 0:space) cat(" ")
for (j in 0:(i - 1)) cat("# ")
cat("\n")
space <- space + 1
}
}
diamond(10)
measure<-function(x){
if(x%%=0){
print("약수입니다.")
}
}
measure<-function(x){
if(x%%==0) {
print("약수입니다.")
}
}
measure<-function(x){
if(x%%==0) {
print("약수입니다.")
}
}
measure<-function(x,y){
if(x%%y==0) {
print(paste(y "는" x "의 약수입니다."))
} else {
print(paste(y "는" x "의 약수가 아닙니다."))
}
}
yaksoo<-function(x){
for(i in 1:100000) {
if(x%%i==0) {
print(i)
}
}
yaksoo(10)
yaksoo<-function(x){
for(i in 1:100000) {
if(x%%i==0) {
print(i)
}
}
yaksoo(10)
yaksoo<-function(x){
for(i in 1:1000) {
if(x%%i==0) {
print(i)
}
}
yaksoo(10)
diamond(10)
yaksoo<-function(x){
for(i in 1:1000) {
if(x%%i==0) {
print(i)
}
}
yaksoo(10)
yaksoo<-function(x){
for(i in 1:1000) {
if(x%%i==0) {
print(i)
}
}
yaksoo(10)
yaksoo(20)
yaksoo<-function(x){
for(i in 1:1000) {
if(x%%i==0) {
print(i)
}
}
yaksoo(20)
yaksoo<-function(x){
for(i in 1:1000) {
if(x%%i==0) {
print(i)
} else {
print("범위값을 초과했습니다.")
}
}
yaksoo(20)
yaksoo<-function(x){
for(i in 1:1000) {
if(x%%i==0) {
print(i)
}
}
}
yaksoo(20)
yaksoo<-function(k){
for(n in 1:k) {
if(k%%n==0) {
print(n)
}
}
}
yaksoo(20)
divisors <- function(x){
#  Vector of numberes to test against
y <- seq_len(x)
#  Modulo division. If remainder is 0 that number is a divisor of x so return it
y[ x%%y == 0 ]
}
divisors(100)
divisors <- function(x){
#  Vector of numberes to test against
y <- seq_len(x)
#  Modulo division. If remainder is 0 that number is a divisor of x so return it
y[ x%%y == 0 ]
}
divisors(100)
divisors(21)
divisors <- function(number) {
x <- c(1:number)
for(i in 1:number){
if(number/i == c(x)) {
paste(i)
}
}
return(i)
}
divisors(10)
divisors <- function(number) {
x <- c(1:number)
for(i in 1:number){
if(number/i == c(x)) {
paste(i)
}
}
return(i)
}
divisors(10)
var1
var1<-read.csv("채소.txt", header=TRUE, fileEncoding = 'utf8')
var1
#구구단
for(i in 1:9){
for(k in 1:9) {
print(paste(i, "x", k, "=", i*k))
}
}
divisors <- function(number) {
x <- c(1:number)
for(i in 1:number){
if(number/i == c(x)) {
paste(i)
}
}
return(i)
}
divisors(10)
divisors <- function(x){
#  Vector of numberes to test against
y <- seq_len(x)
#  Modulo division. If remainder is 0 that number is a divisor of x so return it
y[ x%%y == 0 ]
}
divisors(21)
yaksoo<-function(k){
for(n in 1:k) {
if(k%%n==0) {
print(n)
}
}
}
yaksoo(20)
for(i in 1:9){
for(k in 1:9) {
print(paste(i, "x", k, "=", i*k))
}
}
diamond <- function(max) {
# Upper triangle
space <- max - 1
for (i in 0:(max - 1)) {
for (j in 0:space) cat(" ")
for (j in 0:i) cat("# ")
cat("\n")
space <- space - 1
}
# Lower triangle
space = 1;
for (i in (max - 1):1) {
for (j in 0:space) cat(" ")
for (j in 0:(i - 1)) cat("# ")
cat("\n")
space <- space + 1
}
}
diamond(10)
diamond(5)
getdenominator<-function(x) {
den <-c(1)
if(x>=2){
for (i in 2:x) {
if (x %% i ==0)
den <-c(den,i)
}
}
}
getdenominator(6)
getdenominator<-function(x) {
den <-c(1)
if(x>=2){
for (i in 2:x) {
if (x %% i ==0)
den <-c(den,i)
}
}
}
getdenominator(60)
getDenominator<-function(x) {
den <-c(1)
if(x>=2){
for (i in 2:x) {
if (x %% i ==0)
den <-c(den,i)
}
}
}
getDenominator(60)
getDenominator<-function(x) {
den <-c(1)
if(x>=2){
for (i in 2:x) {
if (x %% i ==0)
den <-c(den,i)
}
}
return(den)
}
getDenominator(60)
yaksoo(28)
#정규식
cha<-c('apple','Apple','Apple','banana','grape')
#정규식
char<-c('apple','Apple','Apple','banana','grape')
grep('apple','char')
char2<-c('apple','banana')
grep(char2,char)
grep(paste(char2, collapse='|'), char1, value=T)
char2<-c('apple','banana')
grep(char2,char)
grep(paste(char2, collapse='|'), char1, value=T)
char<-c('apple','Apple','Apple','banana','grape')
grep('apple','char')
grep('apple',char')
char2<-c('apple','banana')
grep(char2,char)
grep(paste(char2, collapse='|'), char1, value=T)
grep('apple',char)
char2<-c('apple','banana')
grep(char2,char)
grep(paste(char2, collapse='|'), char1, value=T)
char<-c('apple','Apple','Apple','banana','grape')
grep('apple',char)
char2<-c('apple','banana')
grep(char2,char)
grep(paste(char2, collapse='|'), char1, value=T)
char<-c('apple','Apple','Apple','banana','grape')
grep('apple', char)
char2<-c('apple','banana')
grep(char2,char)
grep(paste(char2, collapse='|'), char1, value=T)
grep('pp',char)
grep('pp', char, value=T)
char<-c('apple','Apple','APPLE','banana','grape')
grep('apple', char)
char2<-c('apple','banana')
grep(char2,char)
grep(paste(char2, collapse='|'), char1, value=T)
grep('pp',char)
grep('pp', char, value=T)
grep('^A', char, value=T)
grep('e$', char, value=T)
char2<-c('grape1','apple1','apple','orange','Apple')
grep('ap',char2, value=T)
grep('[1-9]', char2, value=T)
grep('[[:upper:]]', char2, value=T)
grep('[A-Z]', char2, value=T)
grep('\\d', char2, value=T)
char
nchar(char)
paste('choi','jun','hyuk')
paste('choi','jun','hyuk', sep='')
paste('choi','jun','hyuk', sep='/')
paste('I','\'m','hungry')
strsplit('2019/11/08', split='/')
grep('-','010-1234-5678')
regexpr('-','010-1234-5678')
