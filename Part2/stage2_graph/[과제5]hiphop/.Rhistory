'Petal.length'), cex=0.8)
legend('topright', names(iri), cex=0.8, fill=rainbow(length(iri)))
#boxplot 12개 ================================================================
boxplot(v1,v2,v3,col=c('blue','yellow','pink'), names=('setosa','versicolor','virginica'))
#boxplot 12개 ================================================================
boxplot(v1,v2,v3,col=c('blue','yellow','pink'), names=('setosa','versicolor','virginica'),
horizontal=T)
boxplot(v1,v2,v3, col=c('blue','yellow','pink'), names=('setosa','versicolor','virginica'),
horizontal=T)
boxplot(v1,v2,v3, col=c('blue','yellow','pink'), names=('setosa','versicolor','virginica'),
horizontal=T)
#boxplot 12개 ================================================================
boxplot(v1,v2,v3, col=c('blue','yellow','pink'), names=('setosa','versicolor','virginica')
#boxplot 12개 ================================================================
boxplot(v1,v2,v3, col=c('blue','yellow','pink'), names=('setosa','versicolor','virginica')
#boxplot 12개 ================================================================
boxplot(v1,v2,v3)
#boxplot 12개 ================================================================
boxplot(v1,v2,v3, col=rainbow(nrow(iri), names=('setosa','versicolor','virginica'))
#boxplot 12개 ================================================================
boxplot(v1,v2,v3, col=rainbow(nrow(iri)), names=('setosa','versicolor','virginica'))
#boxplot 12개 ================================================================
boxplot(v1,v2,v3, col=c('blue','yellow','pink'), names=c('setosa','versicolor','virginica'),
horizontal = T)
boxplot(v1)
aa
boxplot(aa)
b1<-iris %>%
filter(Species=='setosa')%>%
select(Sepal.Length)
boxplot(b1)
b2<-iris %>%
filter(Species=='setosa')%>%
select(Sepal.width)
b2<-iris %>%
filter(Species=='setosa')%>%
select(Sepal.Width)
b1<-iris %>%
filter(Species=='setosa')%>%
select(Sepal.Length)
b2<-iris %>%
filter(Species=='setosa')%>%
select(Sepal.Width)
b3<-iris %>%
filter(Species=='setosa')%>%
select(Petal.Length)
b4<-iris %>%
filter(Species=='setosa')%>%
select(Petal.Width)
b5<-iris %>%
filter(Species=='versicolor')%>%
select(Sepal.Length)
b6<-iris %>%
filter(Species=='versicolor')%>%
select(Sepal.Width)
b7<-iris %>%
filter(Species=='versicolor')%>%
select(Petal.Length)
b8<-iris %>%
filter(Species=='versicolor')%>%
select(Petal.Width)
b9<-iris %>%
filter(Species=='virginica')%>%
select(Sepal.Length)
b10<-iris %>%
filter(Species=='virginica')%>%
select(Sepal.Width)
b11<-iris %>%
filter(Species=='virginica')%>%
select(Petal.Length)
b12<-iris %>%
filter(Species=='virginica')%>%
select(Petal.Width)
boxplot(b1, col=c('blue'))
boxplot(b1, col=c('blue'), xlab='setosa', ylab='Sepal.Length')
boxplot(b1, col=c('blue'), xlab='setosa', ylab='Sepal.Length')
boxplot(b2, col=c('blue'), xlab='setosa', ylab='Sepal.Width')
boxplot(b3, col=c('blue'), xlab='setosa', ylab='Petal.Length')
boxplot(b4, col=c('blue'), xlab='setosa', ylab='Petal.Width')
boxplot(b5, col=c('yellow'), xlab='versicolor',ylab='Sepal.Length')
boxplot(b6, col=c('yellow'), xlab='versicolor',ylab='Sepal.Width')
boxplot(b7, col=c('yellow'), xlab='versicolor',ylab='Petal.Length')
boxplot(b8, col=c('yellow'), xlab='versicolor',ylab='Petal.Width')
boxplot(b9, col=c('pink'), xlab='virginica',ylab='Sepal.Length')
boxplot(b10, col=c('pink'), xlab='virginica',ylab='Sepal.Width')
boxplot(b11, col=c('pink'), xlab='virginica',ylab='Petal.Length')
boxplot(b12, col=c('pink'), xlab='virginica',ylab='Petal.Width')
boxplot(b1, col=c('blue'), xlab='setosa', ylab='Sepal.Length')
boxplot(b2, col=c('blue'), xlab='setosa', ylab='Sepal.Width')
boxplot(b3, col=c('blue'), xlab='setosa', ylab='Petal.Length')
boxplot(b4, col=c('blue'), xlab='setosa', ylab='Petal.Width')
boxplot(b5, col=c('yellow'), xlab='versicolor',ylab='Sepal.Length')
boxplot(b6, col=c('yellow'), xlab='versicolor',ylab='Sepal.Width')
boxplot(b7, col=c('yellow'), xlab='versicolor',ylab='Petal.Length')
boxplot(b9, col=c('pink'), xlab='virginica',ylab='Sepal.Length')
boxplot(b7, col=c('yellow'), xlab='versicolor',ylab='Petal.Length')
boxplot(b8, col=c('yellow'), xlab='versicolor',ylab='Petal.Width')
boxplot(b7, col=c('yellow'), xlab='versicolor',ylab='Petal.Length')
boxplot(b9, col=c('pink'), xlab='virginica',ylab='Sepal.Length')
boxplot(b10, col=c('pink'), xlab='virginica',ylab='Sepal.Width')
boxplot(b11, col=c('pink'), xlab='virginica',ylab='Petal.Length')
boxplot(b12, col=c('pink'), xlab='virginica',ylab='Petal.Width')
#ggplot2
install.packages('ggplot2')
library(ggplot2)
library(dplyr)
install.packages('gridExtra')
library(gridExtra)
ggplot(mpg, aes(x=cty, y=hwy)) +
geom_point(size=2, color='red') +
ggtitle('도시연비와 고속도로연비 산점도')
#1
ggplot(mpg, aes(x=cty, y=hwy)) +
geom_point(size=1, color='red') +
ggtitle('도시연비와 고속도로연비 산점도')
midw <- filter(midwest, poptotal <= 500000 && popasian <= 10000)
ggplot(midw, aes(x=poptotal, y=popasian)) +
geom_point()
midw <- filter(midwest, poptotal <= 500000 && popasian <= 10000)
options(scipen = 100)
ggplot(midw, aes(x=poptotal, y=popasian)) +
geom_point()
options(scipen = 10)
ggplot(midw, aes(x=poptotal, y=popasian)) +
geom_point()
midw <- filter(midwest, poptotal <= 500000 && popasian <= 10000)
options(scipen = 10)
ggplot(midw, aes(x=poptotal, y=popasian)) +
geom_point()
ggplot(midw, aes(x=poptotal, y=popasian)) +
geom_point(size=1, color='green')
ggplot(midw, aes(x=poptotal, y=popasian)) +
geom_point(size=1, color='blue')
ggplot(midw, aes(x=poptotal, y=popasian)) +
geom_point(size=1, color='blue')+
ggtitle('전체인구와 아시아인 인구간의 관계')
#3
avg_cty<-mpg %>%
filter(class %in% c('suv')) %>%
group_by(manufacturer) %>%
summarise(average = mean(cty)) %>%
arrange(desc(average))%>%
head(5)
avg_cty
#3
avg_cty<-mpg %>%
filter(class %in% c('suv')) %>%
group_by(manufacturer) %>%
summarise(average_cty = mean(cty)) %>%
arrange(desc(average_cty))%>%
head(5)
avg_cty
ggplot(avg_cty, aes(x=manufacturer, y=average_cty))
knitr::opts_chunk$set(echo = TRUE)
#4
library(plotrix)
mw <- midwest %>%
filter(poptotal <= 500000 && popasian <= 10000)
options(scipen = 10)
ggplot(mw, aes(x=poptotal, y=popasian)) +
geom_point() +
xlim(0,500000) + ylim(0,10000)
midw <- filter(midwest, poptotal <= 500000 && popasian <= 10000)
options(scipen = 10)
ggplot(midw, aes(x=poptotal, y=popasian)) +
xlim(0,500000) + ylim(0,10000)+
geom_point(size=1, color='blue')+
ggtitle('전체인구와 아시아인 인구간의 관계')
mw <- midwest %>%
filter(poptotal <= 500000 && popasian <= 10000)
options(scipen = 10)
ggplot(mw, aes(x=poptotal, y=popasian)) +
geom_point() +
xlim(0,500000) + ylim(0,10000)
df_suv <- mpg %>%
filter(class == 'suv') %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
ggplot(df_suv, aes(x=reorder(manufacturer, -mean_cty), y=mean_cty,
fill=manufacturer)) +
geom_col()
ggplot(avg_cty, aes(x=reorder(manufacturer, -average_cty), y=average_cty,
fill=manufacturer))
ggplot(avg_cty, aes(x=reorder(manufacturer, -average_cty), y=average_cty,
fill=manufacturer))
ggplot(df_suv, aes(x=reorder(manufacturer, -mean_cty), y=mean_cty,
fill=manufacturer))
ggplot(avg_cty, aes(x=reorder(manufacturer, -average_cty), y=average_cty, fill=manufacturer))+
geom_col()
barplot(avg_cty)
ggplot(avg_cty, aes(x=reorder(manufacturer, -average_cty), y=average_cty, fill=manufacturer))+
geom_bar()
ggplot(avg_cty, aes(x=reorder(manufacturer, -average_cty), y=average_cty, fill=manufacturer))+
geom_bar()
ggplot(avg_cty, aes(x=manufacturer, y=average_cty, fill=manufacturer))+
geom_bar()
avg_cty
ggplot(avg_cty, aes(x=manufacturer, y=average_cty, fill=manufacturer))+
geom_bar()
ggplot(avg_cty, aes(x=manufacturer, y=average_cty), fill=manufacturer)+
geom_bar()
ggplot(avg_cty, aes(x=reorder(manufacturer, -average_cty), y=average_cty, fill=manufacturer)) +
geom_col()
#4
mpg %>%
group_by(class) %>%
summarise(n=n())->fbar; fbar
ggplot(fbar, aes(x=class, fill=class)) +
geom_col()
ggplot(fbar, aes(x=class, y=n, fill=class)) +
geom_col()
ggplot(fbar, aes(x=reorder(class, -n), y=n, fill=class)) +
geom_col()
economics; View(economics)
ggplot(economics, aes(x=date, y=psavert)) +
geom_line(color="blue", size=2)+
ggtitle("개인저축률 변화 추이")
ggplot(economics, aes(x = date, y = psavert)) +
geom_line()
ggplot(economics, aes(x=date, y=psavert)) +
geom_line(color="blue", size=1)+
ggtitle("개인저축률 변화 추이")
cdd
css
css<-mpg %>%
filter(class %in% c('compact', 'subcompact','suv')) %>%
group_by(class)
css
ggplot(css, aes(x=class, y=cty, fill=class)) +
geom_boxplot()
diacut<-diamonds %>%
group_by(cut) %>%
summarise(count = n()) %>%
arrange(desc(count))
ggplot(diacut, aes(x=count, y=reorder(cut,count)))+
geom_point(size=6) +
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color='red', linetype = 'dashed'))
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=cut, y=count, fill=cut)) +
geom_bar()
#7-1
diamonds
ggplot(diamonds, aes(x=cut, y=count, fill=cut)) +
geom_bar()
View(diamonds)
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=reorder(cut), fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=reorder(cut)), fill=cut) +
geom_bar()
ggplot(diamonds, aes(x=reorder(cut, count), y=count), fill=cut) +
geom_bar()
geom_bar()
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=reorder(cut), fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=reorder(cut,), fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=reorder(cut, -count), fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x=cut, fill=cut)) +
geom_bar()
#7-2
ggplot(diamonds, aes(x=cut, y=price, color=cut, group=cut, main='cut에 따른 가격의 변화'))+
geom_line() +
geom_point(size=1)
ggplot(df_cut, aes(x=cut, y=mean_price, fill=cut)) +
geom_col()
df_cut <- diamonds %>%
group_by(cut) %>%
summarise(mean_price = mean(price))
ggplot(df_cut, aes(x=cut, y=mean_price, fill=cut)) +
geom_col()
ggplot(diamonds, aes(x=cut, y=mean_price, fill=cut)) +
geom_boxplot()
ggplot(diamonds, aes(x=cut, y=mean_price, fill=cut)) +
geom_boxplot()
ggplot(diamonds, aes(x=cut, y=price, fill=cut)) +
geom_boxplot()
ggplot(diamonds, aes(x=cut, y=price, fill=cut)) +
geom_boxplot()+
ggtitle('cut에 따른 가격의 변화')
avg_price <- diamonds %>%
group_by(cut) %>%
summarise(avg_price = mean(price))
ggplot(avg_price, aes(x=cut, y=mean_price, fill=cut)) +
geom_col()
avg_price <- diamonds %>%
group_by(cut) %>%
summarise(avg_price = mean(price))
ggplot(avg_price, aes(x=cut, y=avg_price, fill=cut)) +
geom_col()
ggplot(avg_price, aes(x=reorder(cut, reorder), y=avg_price, fill=cut)) +
geom_col()
ggplot(avg_price, aes(x=reorder(cut, avg_price), y=avg_price, fill=cut)) +
geom_col()
ggplot(avg_price, aes(x=reorder(cut, avg_price), y=avg_price, fill=cut)) +
geom_col()+
ggtitle('cut에 따른 가격의 변화')
ggplot(fbar, aes(x=reorder(class, -n), y=n, fill=class)) +
geom_col()
df_color <- diamonds %>%
group_by(color) %>%
summarise(mean_price = mean(price))
gcolor <- ggplot(df_color, aes(x=color, y=mean_price, fill=color)) +
geom_col()
gcut <- ggplot(df_cut, aes(x=cut, y=mean_price, fill=cut)) +
geom_col()
library(grid)
library(gridExtra)
grid.arrange(gcut, gcolor, ncol=2, top = "cut과 color에 따른 가격의 변화")
#7-3
avg_colprice <- diamonds %>%
group_by(color) %>%
summarise(avg_price = mean(price))
ggplot(avg_colprice, aes(x=color, y=mean_price, fill=color)) +
geom_col()
#7-3
avg_colprice <- diamonds %>%
group_by(color) %>%
summarise(avg_price = mean(price))
#7-3
avg_colprice <- diamonds %>%
group_by(color) %>%
summarise(avg_colprice = mean(price))
ggplot(avg_colprice, aes(x=color, y=avg_colprice, fill=color)) +
geom_col()
ggplot(avg_price, aes(x=cut, y=avg_price, fill=cut)) +
geom_col()
library(grid)
library(gridExtra)
grid.arrange(gcut, gcolor, ncol=2, top = "cut과 color에 따른 가격의 변화")
ggplot(avg_colprice, aes(x=color, y=avg_colprice, fill=color)) +
geom_col()->gcolor
ggplot(avg_price, aes(x=cut, y=avg_price, fill=cut)) +
geom_col()->gcut
grid.arrange(gcut, gcolor, ncol=2, top = "cut과 color에 따른 가격의 변화")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
midw <- filter(midwest, poptotal <= 500000 && popasian <= 10000)
options(scipen = 10)
ggplot(midw, aes(x=poptotal, y=popasian)) +
xlim(0,500000) + ylim(0,10000)+
geom_point(size=1, color='blue')+
ggtitle('전체인구와 아시아인 인구간의 관계')
#Anscombe's Qiartet
#기술통계량(평균(x), 평균(y), 분산(x) 분산(y) 상관계수, 회귀식)
#동일한 4개의 데이터셋
anscombe
setwd("D:/Workspace/R_Data_Analysis/Part2/stage1_wordcloud")
install.packages('rjava')
install.packages('rJava')
library(rJava)
install.packages('KoNLP')
library(KoNLP)
install.packages("wordcloud")
library(wordclous)
library(wordclous)
library(wordcloud)
useSejongDic()
1
1
useSejongDic()
#================================================
data1<-readLines('hiphop.txt'); data1
#hiphop
setwd('D:/Workspace/R_Data_Analysis/Part2/stage2_graph/[과제5]hiphop')
library(KoNLP)
library(dplyr)
library(rJava)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
library(plotrix)
library(extrafont)
useSejongDic()
#================================================
data1<-readLines('hiphop.txt'); data1
data1 <- sapply(data1,extractNoun,USE.NAMES=F)
data1
data3 <- Corpus(VectorSource(data2))
data2 <- Corpus(VectorSource(data1))
data3 <- tm_map(data2,stripWhitespace)
data3 <- tm_map(data3,removeNumbers)
data3 <- tm_map(data3,removePunctuation)
tdm <- TermDocumentMatrix(data3)
m <- as.matrix(tdm)
tdm
m
class(m)
dim(m)
colnames(m)<-c(1:4261)
freq1<-sort(rowSums(m), decreasing=T)
freq1
dim(m)
head(freq1, 100)
freq1<-sort(rowSums(m), decreasing=T)
freq1
head(freq1, 100)
palete<-brewer.pal(7, 'Set3')
wordcloud(names(freq1), freq = freq1, scale=c(4,0.7), min.freq=2,
colors=palete, random.order=F, random.color=T)
legend(0.3, 0.8 ,"hiphop 가사 단어 빈도 분석", cex=1, fill=NA, border=NA, bg="white",
text.col="red",text.font=2,box.col="red")
#==================================================================================
top10 <- head(sort(freq1, decreasing=T),10)
top10
palete <- brewer.pal(10,"Set3")
pct <- round(top10/sum(top10) * 100 ,1)
names(top10)
lab <- paste(names(top10),"\n",pct,"%", sep = '')
lab
#일반 파이
pie(top10, main="hiphop 가사 단어 빈도 분석", col=palete,
cex=0.8,labels = lab)
#ggplot로 파이 만들기
str(top10) #데이터프레임으로 바꾸기
df_top10<-as.data.frame(top10)
df_top10
tdm <- TermDocumentMatrix(data3)
tdm
m <- as.matrix(tdm)
m
data1 <- sapply(data1,extractNoun,USE.NAMES=F)
corp1 <- Corpus(VectorSource(data1))
corp1
tdm <- TermDocumentMatrix(corp1)
tdm
data1 <- sapply(data1,extractNoun,USE.NAMES=F)
corp1 <- Corpus(VectorSource(data1))
data3 <- tm_map(data2,stripWhitespace)
data3 <- tm_map(data3,removeNumbers)
data3 <- tm_map(data3,removePunctuation)
corp1
data3 <- tm_map(corp1,stripWhitespace)
data1 <- sapply(data1,extractNoun,USE.NAMES=F)
#================================================
data1<-readLines('hiphop.txt'); data1
data1 <- sapply(data1,extractNoun,USE.NAMES=F)
corp1 <- Corpus(VectorSource(data1))
data3 <- tm_map(corp1,stripWhitespace)
data3 <- tm_map(data3,removeNumbers)
data3 <- tm_map(data3,removePunctuation)
corp1
tdm <- TermDocumentMatrix(corp1)
tdm
data3
data3 <- tm_map(data3,removePunctuation)
data3
tdm <- TermDocumentMatrix(data3)
tdm
m <- as.matrix(tdm)
data3<-tm_map(data3,tolower)
tdm2 <- TermDocumentMatrix(data3)
tdm2
m2 <- as.matrix(tdm2)
m2
class(m2)
#================================================
data1<-readLines('hiphop.txt'); data1
data1 <- sapply(data1,extractNoun,USE.NAMES=F)
corp1 <- Corpus(VectorSource(data1))
data3 <- tm_map(corp1,stripWhitespace)
data3 <- tm_map(data3,removeNumbers)
data3 <- tm_map(data3,removePunctuation)
data3<-tm_map(data3,tolower)
data3<-tm_map(data3,removeWords,stopwords('en'))
data3
tdm <- TermDocumentMatrix(data3)
tdm
m <- as.matrix(tdm)
m
freq1<-sort(rowSums(m2), decreasing = T)
head(freq1, 20)
freq1<-sort(rowSums(m2), decreasing=T)
head(freq1, 100)
freq2<-sort(colSums(m2), decreasing=T)
head(freq2, 100)
palete<-brewer.pal(7, 'Set3')
wordcloud(names(freq1), freq = freq1, scale=c(4,0.7), min.freq=2,
colors=palete, random.order=F, random.color=T)
legend(0.3, 0.8 ,"hiphop 가사 단어 빈도 분석", cex=1, fill=NA, border=NA, bg="white",
text.col="red",text.font=2,box.col="red")
#==================================================================================
top10 <- head(sort(freq1, decreasing=T),10)
#==================================================================================
top10 <- head(sort(freq1, decreasing=T),10)
top10
palete <- brewer.pal(10,"Set3")
pct <- round(top10/sum(top10) * 100 ,1)
names(top10)
lab <- paste(names(top10),"\n",pct,"%", sep = '')
lab
#일반 파이
pie(top10, main="hiphop 가사 단어 빈도 분석", col=palete,
cex=0.8,labels = lab)
#ggplot로 파이 만들기
str(top10) #데이터프레임으로 바꾸기
df_top10<-as.data.frame(top10)
df_top10
